package ch.maystre.gilbert.vorodraw.geometry;

/**
 * A class representing half planes with three coordinates: (a, b, c)
 * We say that a point (x,y) is in the half-plane if ax + by + c >= 0
 */
public class HalfPlane {

    private final double a;
    private final double b;
    private final double c;

    public HalfPlane(double a, double b, double c){
        this.a = a;
        this.b = b;
        this.c = c;
    }

    /**
     * Construct a half-plane generated by the bissector between two points
     * @param center the first point (which is in the half-plane)
     * @param neighbor the second point
     */
    public HalfPlane(Point center, Point neighbor){
        double pa;
        double pb;
        double pc;

        if(center.y == neighbor.y){ // vertical case
            pa = 1;
            pb = 0;
            pc = -(center.x + neighbor.x)/2;
        }
        else if(center.x == neighbor.x){ // horizontal case
            pa = 0;
            pb = 1;
            pc = -(center.y + neighbor.y)/2;
        }
        else{ // general case
            double m = (center.y - neighbor.y)/(center.x - neighbor.x);
            m = -1/m; // find perpendicular

            double mx = (center.x + neighbor.x)/2;
            double my = (center.y + neighbor.y)/2;

            double h = my - mx * m;

            pa = m;
            pb = -1;
            pc = h;
        }

        boolean flip = pa * center.x + pb * center.y + pc < 0;
        this.a = flip ? -pa : pa;
        this.b = flip ? -pb : pb;
        this.c = flip ? -pc : pc;
    }

    public Line getBoundary(){
        return new Line(a, b, c);
    }

    /**
     * Check to see if a point is contained in the half-space
     * @param p the point
     * @return true iff the point is in the half-space
     */
    public boolean isIn(Point p){
        return a * p.x + b * p.y + c >= 0;
    }

    @Override
    public String toString(){
        return "HalfPlane with params: a = " + a + " b = " + b + " c = " + c;
    }

}
